유니티의 기본적인 활용요소 복습
Scene() - 개발하는 개발자가 주로 보는 창
Game()- 플레이어가 보는 시점 을보는 창
Hierarchy() - 게임의 오브젝트들이 있는 곳, 이곳을 거쳐 오브젝트를 선택해 인스펙터로 컴포넌트 등을 설정하는 편이다.
Inspector() - 게임오브젝트의 속성(컴포넌트, 레이어, 태그 등
Project(), 자원관리 - 스크립트, 프리팹 등등을 모아 놓은곳
Console() - 디버그 화면, 주로 오류같은 것들이 나옴
Vector() = x, y, z (물리와 관련된 메소드)
Component() - 속성들을 추가할 수 있는 요소 (물리, 스크립트,사운드 등을 추가하기가 가능함.)
Material() - 재질, 플레이어의 이동을 설정할 때 같이 설정해주어야 했던걸로 기억함
Start() -> 게임이 실행됐을 때, 오브젝트를 1번 실행하는 것
Update() -> Start() 함수가 실행되고 매프레임마다 실행됨
OnEnable() -> 해당 게임오브젝트가 켜질때 실행되는 코드
GetComponent => 해당 게임오브젝트안에 있는 컴포넌트를 가지고 오게 함.
AddComponent => 컴포넌트를 추가하게 함.
RemoveComponent -> 컴포넌트를 삭제시킴
Instantiate() -> 오브젝트를 생성 시키는 함수
Destroy() -> 해당 게임오브젝트를 삭제를 시키는 함수 (예를 들어 플레이어와 충돌했을 때 삭제라던지..
Collision은 물리 연산을 통해 충돌 처리를 하는데, 많이 사용하면 리소스를 많이 잡아먹으므로 주의가 필요하다.
OnCollisionEnter -> 두 물체가 충돌을 시작 할때
OnCollisionStay -> 두 물체가 겹쳐진 상태에서 값이 변화가 있을때
gameObject.SetActive(bool) -> 해당 게임오브젝트를 끄고 킴 (특정 조건에 나타나게 하면 활용도가 높을 듯 보임) 
OnCollisionExit -> 두 물체가 충돌에서 벗어나기 직전
이동로직을 만들 때 유용한 것
Input.GetAxis("Vertical"); -> 키보드의 상하 방향값
Input.GetAxis("Horizontal"); -> 키보드의 좌우 방향값
Input.GetKeyDown(KeyCode.키보드키값) -> 키보드의 키를 누른 상태에서 실행됨 
그리고 유니티는 int, bool, float말고 자체적인 형식을 제공하기도 하는데, 벡터나 Quaternion같은 게 그 예시임
